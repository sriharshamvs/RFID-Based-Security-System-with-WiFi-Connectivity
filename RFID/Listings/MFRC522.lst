C51 COMPILER V9.54   MFRC522                                                               07/11/2018 21:53:40 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MFRC522
OBJECT MODULE PLACED IN .\Objects\MFRC522.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MFRC522.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\M
                    -FRC522.lst) TABS(2) OBJECT(.\Objects\MFRC522.obj)

line level    source

   1          #include <intrins.h>
   2          #include "reg52.h"
   3          #include "main.h"
   4          #include "mfrc522.h"
   5          #include <string.h> 
   6          
   7          #define MAXRLEN 18
   8          
   9          sfr   RCAP2LH =   0xCA;
  10          sfr   T2LH    =   0xCC;                        
  11          
  12          /////////////////////////////////////////////////////////////////////
  13          //  PCD Request
  14          /////////////////////////////////////////////////////////////////////
  15          char PcdRequest(unsigned char req_code,unsigned char *pTagType){
  16   1         char status;  
  17   1         unsigned int  unLen;
  18   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  19   1         ClearBitMask(Status2Reg,0x08);
  20   1         WriteRawRC(BitFramingReg,0x07);
  21   1         SetBitMask(TxControlReg,0x03);
  22   1         ucComMF522Buf[0] = req_code;
  23   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  24   1         if ((status == MI_OK) && (unLen == 0x10)){    
  25   2             *pTagType     = ucComMF522Buf[0];
  26   2             *(pTagType+1) = ucComMF522Buf[1];
  27   2         }
  28   1         else{
  29   2          status = MI_ERR;   
  30   2         }   
  31   1         return status;
  32   1      }
  33          
  34          /////////////////////////////////////////////////////////////////////
  35          //  PCD Anti Collision
  36          /////////////////////////////////////////////////////////////////////  
  37          char PcdAnticoll(unsigned char *pSnr){
  38   1          char status;
  39   1          unsigned char i,snr_check=0;
  40   1          unsigned int  unLen;
  41   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  42   1          ClearBitMask(Status2Reg,0x08);
  43   1          WriteRawRC(BitFramingReg,0x00);
  44   1          ClearBitMask(CollReg,0x80);
  45   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  46   1          ucComMF522Buf[1] = 0x20;
  47   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  48   1          if (status == MI_OK){
  49   2             for (i=0; i<4; i++){   
  50   3                   *(pSnr+i)  = ucComMF522Buf[i];
  51   3                   snr_check ^= ucComMF522Buf[i];
  52   3             }
  53   2             if (snr_check != ucComMF522Buf[i]){
  54   3              status = MI_ERR;
C51 COMPILER V9.54   MFRC522                                                               07/11/2018 21:53:40 PAGE 2   

  55   3             }
  56   2          }    
  57   1          SetBitMask(CollReg,0x80);
  58   1          return status;
  59   1      }
  60          
  61          /////////////////////////////////////////////////////////////////////
  62          //  PCD RESET
  63          /////////////////////////////////////////////////////////////////////
  64          char PcdReset(void){
  65   1          MF522_RST=1;
  66   1          _nop_();
  67   1          MF522_RST=0;
  68   1          _nop_();
  69   1          MF522_RST=1;
  70   1           _nop_();
  71   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
  72   1          _nop_();
  73   1          WriteRawRC(ModeReg,0x3D);            
  74   1          WriteRawRC(TReloadRegL,30);           
  75   1          WriteRawRC(TReloadRegH,0);
  76   1          WriteRawRC(TModeReg,0x8D);
  77   1          WriteRawRC(TPrescalerReg,0x3E);
  78   1          WriteRawRC(TxAutoReg,0x40);     
  79   1          return MI_OK;
  80   1      }
  81          //////////////////////////////////////////////////////////////////////
  82          //  PCD ISO Type
  83          //////////////////////////////////////////////////////////////////////
  84          char M500PcdConfigISOType(unsigned char type){
  85   1         if (type == 'A'){                     //ISO14443_A 
  86   2             ClearBitMask(Status2Reg,0x08);
  87   2             WriteRawRC(ModeReg,0x3D);
  88   2             WriteRawRC(RxSelReg,0x86);
  89   2             WriteRawRC(RFCfgReg,0x7F);   
  90   2             WriteRawRC(TReloadRegL,30);
  91   2             WriteRawRC(TReloadRegH,0);
  92   2             WriteRawRC(TModeReg,0x8D);
  93   2             WriteRawRC(TPrescalerReg,0x3E);
  94   2             delay_10ms(1);
  95   2             PcdAntennaOn();
  96   2         }
  97   1         else{
  98   2          return -1; 
  99   2         }
 100   1         return MI_OK;
 101   1      }
 102          ////////////////////////////////////////////////////////////////////////////
 103          //   This function is an SPI driver Used to Read the data from MFRC522    //
 104          ////////////////////////////////////////////////////////////////////////////
 105          unsigned char ReadRawRC(unsigned char Address){
 106   1           unsigned char i, ucAddr;
 107   1           unsigned char ucResult=0;
 108   1           MF522_SCK = 1;
 109   1           MF522_NSS = 0;
 110   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 111   1           for(i=8;i>0;i--){
 112   2               MF522_SI = ((ucAddr&0x80)==0x80);
 113   2               MF522_SCK = 0;
 114   2               ucAddr <<= 1;
 115   2               MF522_SCK = 1;
 116   2           }
C51 COMPILER V9.54   MFRC522                                                               07/11/2018 21:53:40 PAGE 3   

 117   1           for(i=8;i>0;i--){
 118   2               MF522_SCK = 0;
 119   2               ucResult <<= 1;
 120   2               ucResult|=(bit)MF522_SO;
 121   2               MF522_SCK = 1;
 122   2           }
 123   1          MF522_NSS = 1;
 124   1          return ucResult;
 125   1      } 
 126          
 127          ////////////////////////////////////////////////////////////////////////////
 128          //   This function is an SPI driver Used to Write the data to MFRC522     //
 129          ////////////////////////////////////////////////////////////////////////////
 130          void WriteRawRC(unsigned char Address, unsigned char value){  
 131   1          unsigned char i, ucAddr;
 132   1          MF522_SCK = 1;
 133   1          MF522_NSS = 0;
 134   1          ucAddr = ((Address<<1)&0x7E);
 135   1          for(i=8;i>0;i--){
 136   2              MF522_SI = ((ucAddr&0x80)==0x80);
 137   2              MF522_SCK = 0;
 138   2              ucAddr <<= 1;
 139   2              MF522_SCK = 1;
 140   2          }
 141   1          for(i=8;i>0;i--){
 142   2              MF522_SI = ((value&0x80)==0x80);
 143   2              MF522_SCK = 0;
 144   2              value <<= 1;
 145   2              MF522_SCK = 1;
 146   2          }
 147   1          MF522_NSS = 1;
 148   1      }
 149          
 150          /////////////////////////////////////////////////////////////////////
 151          //    Used to Set the Bit Mask                                     //
 152          /////////////////////////////////////////////////////////////////////
 153          void SetBitMask(unsigned char reg,unsigned char mask){
 154   1          char tmp = 0x00;
 155   1          tmp = ReadRawRC(reg);
 156   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 157   1      }
 158          
 159          /////////////////////////////////////////////////////////////////////
 160          //  Used to Clear Bit Mask                                         //
 161          /////////////////////////////////////////////////////////////////////
 162          void ClearBitMask(unsigned char reg,unsigned char mask){
 163   1          char tmp = 0x0;
 164   1          tmp = ReadRawRC(reg);
 165   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 166   1      }
 167          
 168          /////////////////////////////////////////////////////////////////////
 169          //  PCD Communication With MFRC522
 170          /////////////////////////////////////////////////////////////////////
 171          char PcdComMF522( unsigned char Command,
 172                            unsigned char *pInData,
 173                            unsigned char InLenByte,
 174                            unsigned char *pOutData,
 175                            unsigned int  *pOutLenBit )
 176          {
 177   1          char status = MI_ERR;
 178   1          unsigned char irqEn   = 0x00;
C51 COMPILER V9.54   MFRC522                                                               07/11/2018 21:53:40 PAGE 4   

 179   1          unsigned char waitFor = 0x00;
 180   1          unsigned char lastBits;
 181   1          unsigned char n;
 182   1          unsigned int i;
 183   1          switch (Command){
 184   2             case PCD_AUTHENT:
 185   2                irqEn   = 0x12;
 186   2                waitFor = 0x10;
 187   2                break;
 188   2             case PCD_TRANSCEIVE:
 189   2                irqEn   = 0x77;
 190   2                waitFor = 0x30;
 191   2                break;
 192   2             default:
 193   2               break;
 194   2          }
 195   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 196   1          ClearBitMask(ComIrqReg,0x80);
 197   1          WriteRawRC(CommandReg,PCD_IDLE);
 198   1          SetBitMask(FIFOLevelReg,0x80);
 199   1          for (i=0; i<InLenByte; i++){
 200   2            WriteRawRC(FIFODataReg, pInData[i]);    
 201   2          }
 202   1          WriteRawRC(CommandReg, Command);
 203   1          if (Command == PCD_TRANSCEIVE){
 204   2            SetBitMask(BitFramingReg,0x80);
 205   2          }
 206   1          i = 2000;
 207   1          do{
 208   2            n = ReadRawRC(ComIrqReg);
 209   2            i--;
 210   2          }while ((i!=0) && !(n&0x01) && !(n&waitFor));
 211   1          ClearBitMask(BitFramingReg,0x80);
 212   1          if (i!=0){    
 213   2               if(!(ReadRawRC(ErrorReg)&0x1B)){
 214   3                   status = MI_OK;
 215   3                   if (n & irqEn & 0x01){
 216   4                    status = MI_NOTAGERR;
 217   4                   }
 218   3                   if (Command == PCD_TRANSCEIVE){
 219   4                      n = ReadRawRC(FIFOLevelReg);
 220   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 221   4                      if (lastBits){
 222   5                *pOutLenBit = (n-1)*8 + lastBits;
 223   5              }
 224   4                      else{
 225   5                *pOutLenBit = n*8;
 226   5              }
 227   4                      if (n == 0){
 228   5                n = 1;
 229   5              }
 230   4                      if (n > MAXRLEN){
 231   5                n = MAXRLEN;
 232   5              }
 233   4                      for (i=0; i<n; i++){
 234   5                pOutData[i] = ReadRawRC(FIFODataReg);
 235   5              }
 236   4            }
 237   3               }
 238   2               else{
 239   3            status = MI_ERR;
 240   3           }       
C51 COMPILER V9.54   MFRC522                                                               07/11/2018 21:53:40 PAGE 5   

 241   2         }
 242   1         SetBitMask(ControlReg,0x80);           // stop timer now
 243   1         WriteRawRC(CommandReg,PCD_IDLE); 
 244   1         return status;
 245   1      }
 246          /////////////////////////////////////////////////////////////////////
 247          //  PCD Antenna ON
 248          /////////////////////////////////////////////////////////////////////
 249          void PcdAntennaOn(){
 250   1          unsigned char i;
 251   1          i = ReadRawRC(TxControlReg);
 252   1          if (!(i & 0x03)){
 253   2              SetBitMask(TxControlReg, 0x03);
 254   2          }
 255   1      }
 256          /////////////////////////////////////////////////////////////////////
 257          // PCD Antenna OFF
 258          /////////////////////////////////////////////////////////////////////
 259          void PcdAntennaOff(){
 260   1          ClearBitMask(TxControlReg, 0x03);
 261   1      }
 262          
 263          ///////////////////////////////////////////////////////////////////////
 264          // Delay 10ms
 265          ///////////////////////////////////////////////////////////////////////
 266          
 267          void delay_10ms(unsigned int _10ms){
 268   1      #ifndef NO_TIMER2
 269   1          RCAP2LH = RCAP2_10ms;
 270   1          T2LH    = RCAP2_10ms;
 271   1          TR2 = TRUE;
 272   1          while (_10ms--){
 273   2            while (!TF2);
 274   2            TF2 = FALSE;
 275   2          }
 276   1          TR2 = FALSE;
 277   1      #else
                  while (_10ms--){
                    delay_50us(19);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid )
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
C51 COMPILER V9.54   MFRC522                                                               07/11/2018 21:53:40 PAGE 6   

                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(19);
                    if (CmdValid)
                        return;
                  }
              #endif
 311   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    944    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      66
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
