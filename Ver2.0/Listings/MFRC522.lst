C51 COMPILER V9.54   MFRC522                                                               04/30/2019 09:54:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MFRC522
OBJECT MODULE PLACED IN .\Objects\MFRC522.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE MFRC522.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\MFRC522.lst) TABS(2) OBJECT(.\Objects\MFRC522.obj)

line level    source

   1          #include <intrins.h>
   2          #include "mfrc522.h"
   3          #include <string.h> 
   4          #include "OLED.h"
   5          
   6          #define MAXRLEN 18
   7          
   8            
   9          
  10          /////////////////////////////////////////////////////////////////////
  11          //  PCD Request
  12          /////////////////////////////////////////////////////////////////////
  13          char PcdRequest(unsigned char req_code,unsigned char *pTagType){
  14   1         char status;  
  15   1         unsigned int  unLen;
  16   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  17   1         ClearBitMask(Status2Reg,0x08);
  18   1         WriteRawRC(BitFramingReg,0x07);
  19   1         SetBitMask(TxControlReg,0x03);
  20   1         ucComMF522Buf[0] = req_code;
  21   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  22   1         if ((status == MI_OK) && (unLen == 0x10)){    
  23   2             *pTagType     = ucComMF522Buf[0];
  24   2             *(pTagType+1) = ucComMF522Buf[1];
  25   2         }
  26   1         else{
  27   2          status = MI_ERR;   
  28   2         }   
  29   1         return status;
  30   1      }
  31          
  32          /////////////////////////////////////////////////////////////////////
  33          //  PCD Anti Collision
  34          /////////////////////////////////////////////////////////////////////  
  35          char PcdAnticoll(unsigned char *pSnr){
  36   1          char status;
  37   1          unsigned char i,snr_check=0;
  38   1          unsigned int  unLen;
  39   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  40   1          ClearBitMask(Status2Reg,0x08);
  41   1          WriteRawRC(BitFramingReg,0x00);
  42   1          ClearBitMask(CollReg,0x80);
  43   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  44   1          ucComMF522Buf[1] = 0x20;
  45   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  46   1          if (status == MI_OK){
  47   2             for (i=0; i<4; i++){   
  48   3                   *(pSnr+i)  = ucComMF522Buf[i];
  49   3                   snr_check ^= ucComMF522Buf[i];
  50   3             }
  51   2             if (snr_check != ucComMF522Buf[i]){
  52   3              status = MI_ERR;
  53   3             }
  54   2          }    
C51 COMPILER V9.54   MFRC522                                                               04/30/2019 09:54:10 PAGE 2   

  55   1          SetBitMask(CollReg,0x80);
  56   1          return status;
  57   1      }
  58          
  59          /////////////////////////////////////////////////////////////////////
  60          //  PCD RESET
  61          /////////////////////////////////////////////////////////////////////
  62          char PcdReset(void){
  63   1          MF522_RST=1;
  64   1          _nop_();
  65   1          MF522_RST=0;
  66   1          _nop_();
  67   1          MF522_RST=1;
  68   1           _nop_();
  69   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
  70   1          _nop_();
  71   1          WriteRawRC(ModeReg,0x3D);            
  72   1          WriteRawRC(TReloadRegL,30);           
  73   1          WriteRawRC(TReloadRegH,0);
  74   1          WriteRawRC(TModeReg,0x8D);
  75   1          WriteRawRC(TPrescalerReg,0x3E);
  76   1          WriteRawRC(TxAutoReg,0x40);     
  77   1          return MI_OK;
  78   1      }
  79          //////////////////////////////////////////////////////////////////////
  80          //  PCD ISO Type
  81          //////////////////////////////////////////////////////////////////////
  82          char M500PcdConfigISOType(unsigned char type){
  83   1         if (type == 'A'){                     //ISO14443_A 
  84   2             ClearBitMask(Status2Reg,0x08);
  85   2             WriteRawRC(ModeReg,0x3D);
  86   2             WriteRawRC(RxSelReg,0x86);
  87   2             WriteRawRC(RFCfgReg,0x7F);   
  88   2             WriteRawRC(TReloadRegL,30);
  89   2             WriteRawRC(TReloadRegH,0);
  90   2             WriteRawRC(TModeReg,0x8D);
  91   2             WriteRawRC(TPrescalerReg,0x3E);
  92   2              
  93   2           delay_10ms(1);
  94   2               //OLED_Clear();
  95   2           PcdAntennaOn();
  96   2              //OLED_Clear();
  97   2      
  98   2         }
  99   1         else{
 100   2          return -1; 
 101   2         }
 102   1         return MI_OK;
 103   1      }
 104          ////////////////////////////////////////////////////////////////////////////
 105          //   This function is an SPI driver Used to Read the data from MFRC522    //
 106          ////////////////////////////////////////////////////////////////////////////
 107          unsigned char ReadRawRC(unsigned char Address){
 108   1           unsigned char i, ucAddr;
 109   1           unsigned char ucResult=0;
 110   1           MF522_SCK = 1;
 111   1           MF522_NSS = 0;
 112   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 113   1           for(i=8;i>0;i--){
 114   2               MF522_SI = ((ucAddr&0x80)==0x80);
 115   2               MF522_SCK = 0;
 116   2               ucAddr <<= 1;
C51 COMPILER V9.54   MFRC522                                                               04/30/2019 09:54:10 PAGE 3   

 117   2               MF522_SCK = 1;
 118   2           }
 119   1           for(i=8;i>0;i--){
 120   2               MF522_SCK = 0;
 121   2               ucResult <<= 1;
 122   2               ucResult|=(bit)MF522_SO;
 123   2               MF522_SCK = 1;
 124   2           }
 125   1          MF522_NSS = 1;
 126   1          return ucResult;
 127   1      } 
 128          
 129          ////////////////////////////////////////////////////////////////////////////
 130          //   This function is an SPI driver Used to Write the data to MFRC522     //
 131          ////////////////////////////////////////////////////////////////////////////
 132          void WriteRawRC(unsigned char Address, unsigned char value){  
 133   1          unsigned char i, ucAddr;
 134   1          MF522_SCK = 1;
 135   1          MF522_NSS = 0;
 136   1          ucAddr = ((Address<<1)&0x7E);
 137   1          for(i=8;i>0;i--){
 138   2              MF522_SI = ((ucAddr&0x80)==0x80);
 139   2              MF522_SCK = 0;
 140   2              ucAddr <<= 1;
 141   2              MF522_SCK = 1;
 142   2          }
 143   1          for(i=8;i>0;i--){
 144   2              MF522_SI = ((value&0x80)==0x80);
 145   2              MF522_SCK = 0;
 146   2              value <<= 1;
 147   2              MF522_SCK = 1;
 148   2          }
 149   1          MF522_NSS = 1;
 150   1      }
 151          
 152          /////////////////////////////////////////////////////////////////////
 153          //    Used to Set the Bit Mask                                     //
 154          /////////////////////////////////////////////////////////////////////
 155          void SetBitMask(unsigned char reg,unsigned char mask){
 156   1          char tmp = 0x00;
 157   1          tmp = ReadRawRC(reg);
 158   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 159   1      }
 160          
 161          /////////////////////////////////////////////////////////////////////
 162          //  Used to Clear Bit Mask                                         //
 163          /////////////////////////////////////////////////////////////////////
 164          void ClearBitMask(unsigned char reg,unsigned char mask){
 165   1          char tmp = 0x0;
 166   1          tmp = ReadRawRC(reg);
 167   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 168   1      }
 169          
 170          /////////////////////////////////////////////////////////////////////
 171          //  PCD Communication With MFRC522
 172          /////////////////////////////////////////////////////////////////////
 173          char PcdComMF522( unsigned char Command,
 174                            unsigned char *pInData,
 175                            unsigned char InLenByte,
 176                            unsigned char *pOutData,
 177                            unsigned int  *pOutLenBit )
 178          {
C51 COMPILER V9.54   MFRC522                                                               04/30/2019 09:54:10 PAGE 4   

 179   1          char status = MI_ERR;
 180   1          unsigned char irqEn   = 0x00;
 181   1          unsigned char waitFor = 0x00;
 182   1          unsigned char lastBits;
 183   1          unsigned char n;
 184   1          unsigned int i;
 185   1          switch (Command){
 186   2             case PCD_AUTHENT:
 187   2                irqEn   = 0x12;
 188   2                waitFor = 0x10;
 189   2                break;
 190   2             case PCD_TRANSCEIVE:
 191   2                irqEn   = 0x77;
 192   2                waitFor = 0x30;
 193   2                break;
 194   2             default:
 195   2               break;
 196   2          }
 197   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 198   1          ClearBitMask(ComIrqReg,0x80);
 199   1          WriteRawRC(CommandReg,PCD_IDLE);
 200   1          SetBitMask(FIFOLevelReg,0x80);
 201   1          for (i=0; i<InLenByte; i++){
 202   2            WriteRawRC(FIFODataReg, pInData[i]);    
 203   2          }
 204   1          WriteRawRC(CommandReg, Command);
 205   1          if (Command == PCD_TRANSCEIVE){
 206   2            SetBitMask(BitFramingReg,0x80);
 207   2          }
 208   1          i = 2000;
 209   1          do{
 210   2            n = ReadRawRC(ComIrqReg);
 211   2            i--;
 212   2          }while ((i!=0) && !(n&0x01) && !(n&waitFor));
 213   1          ClearBitMask(BitFramingReg,0x80);
 214   1          if (i!=0){    
 215   2               if(!(ReadRawRC(ErrorReg)&0x1B)){
 216   3                   status = MI_OK;
 217   3                   if (n & irqEn & 0x01){
 218   4                    status = MI_NOTAGERR;
 219   4                   }
 220   3                   if (Command == PCD_TRANSCEIVE){
 221   4                      n = ReadRawRC(FIFOLevelReg);
 222   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 223   4                      if (lastBits){
 224   5                *pOutLenBit = (n-1)*8 + lastBits;
 225   5              }
 226   4                      else{
 227   5                *pOutLenBit = n*8;
 228   5              }
 229   4                      if (n == 0){
 230   5                n = 1;
 231   5              }
 232   4                      if (n > MAXRLEN){
 233   5                n = MAXRLEN;
 234   5              }
 235   4                      for (i=0; i<n; i++){
 236   5                pOutData[i] = ReadRawRC(FIFODataReg);
 237   5              }
 238   4            }
 239   3               }
 240   2               else{
C51 COMPILER V9.54   MFRC522                                                               04/30/2019 09:54:10 PAGE 5   

 241   3            status = MI_ERR;
 242   3           }       
 243   2         }
 244   1         SetBitMask(ControlReg,0x80);           // stop timer now
 245   1         WriteRawRC(CommandReg,PCD_IDLE); 
 246   1         return status;
 247   1      }
 248          /////////////////////////////////////////////////////////////////////
 249          //  PCD Antenna ON
 250          /////////////////////////////////////////////////////////////////////
 251          void PcdAntennaOn(){
 252   1          unsigned char i;
 253   1          i = ReadRawRC(TxControlReg);
 254   1          if (!(i & 0x03)){
 255   2              SetBitMask(TxControlReg, 0x03);
 256   2          }
 257   1      }
 258          /////////////////////////////////////////////////////////////////////
 259          // PCD Antenna OFF
 260          /////////////////////////////////////////////////////////////////////
 261          void PcdAntennaOff(){
 262   1          ClearBitMask(TxControlReg, 0x03);
 263   1      }
 264          
 265          ///////////////////////////////////////////////////////////////////////
 266          // Delay 10ms
 267          ///////////////////////////////////////////////////////////////////////
 268          
 269          void delay_10ms(unsigned int _10ms){
 270   1      #ifndef NO_TIMER2
 271   1          RCAP2LH = RCAP2_10ms;
 272   1          T2LH    = RCAP2_10ms;
 273   1          TR2 = TRUE;
 274   1          while (_10ms--){
 275   2            while (!TF2);
 276   2            TF2 = FALSE;
 277   2          }
 278   1          TR2 = FALSE;
 279   1      #else
                  while (_10ms--){
                    delay_50us(19);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid )
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
C51 COMPILER V9.54   MFRC522                                                               04/30/2019 09:54:10 PAGE 6   

                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(19);
                    if (CmdValid)
                        return;
                  }
              #endif
 313   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1175    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      66
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
