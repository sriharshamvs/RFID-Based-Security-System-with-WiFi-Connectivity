C51 COMPILER V9.54   OLED                                                                  04/30/2019 09:54:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\OLED.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE OLED.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\OLED.lst) TABS(2) OBJECT(.\Objects\OLED.obj)

line level    source

   1          #include "MPCx58AP.h"
   2          #include "OLED.h"
   3          
   4          #define SCL_PIN   P1_0
   5          #define SDA_PIN   P1_1
   6          #define RES       P1_2
   7          
   8          #define HIGH 1
   9          #define LOW  0
  10          
  11          //typedef unsigned char uint8_t;
  12          
  13          uint8_t OledLineNum,OledCursorPos;
  14          
  15          
  16          void oledSendCommand(uint8_t cmd);
  17          void oledSendStart(uint8_t address);
  18          void oledSendStop(void);
  19          void oledWaitForAck(void);
  20          void oledSendByte(uint8_t ch);
  21          void delay(void);
  22          /**************************************************************************************************/
  23          
  24          
  25          #define FONT_SIZE 5
  26          code const OledFontTable[][FONT_SIZE]=
  27          {
  28                  0x00, 0x00, 0x00, 0x00, 0x00,   // space
  29                  0x00, 0x00, 0x2f, 0x00, 0x00,   // !
  30                  0x00, 0x07, 0x00, 0x07, 0x00,   // "
  31                  0x14, 0x7f, 0x14, 0x7f, 0x14,   // #
  32                  0x24, 0x2a, 0x7f, 0x2a, 0x12,   // $
  33                  0x23, 0x13, 0x08, 0x64, 0x62,   // %
  34                  0x36, 0x49, 0x55, 0x22, 0x50,   // &
  35                  0x00, 0x05, 0x03, 0x00, 0x00,   // '
  36                  0x00, 0x1c, 0x22, 0x41, 0x00,   // (
  37                  0x00, 0x41, 0x22, 0x1c, 0x00,   // )
  38                  0x14, 0x08, 0x3E, 0x08, 0x14,   // *
  39                  0x08, 0x08, 0x3E, 0x08, 0x08,   // +
  40                  0x00, 0x00, 0xA0, 0x60, 0x00,   // ,
  41                  0x08, 0x08, 0x08, 0x08, 0x08,   // -
  42                  0x00, 0x60, 0x60, 0x00, 0x00,   // .
  43                  0x20, 0x10, 0x08, 0x04, 0x02,   // /
  44          
  45                  0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
  46                  0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
  47                  0x42, 0x61, 0x51, 0x49, 0x46,   // 2
  48                  0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
  49                  0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
  50                  0x27, 0x45, 0x45, 0x45, 0x39,   // 5
  51                  0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
  52                  0x01, 0x71, 0x09, 0x05, 0x03,   // 7
  53                  0x36, 0x49, 0x49, 0x49, 0x36,   // 8
  54                  0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
C51 COMPILER V9.54   OLED                                                                  04/30/2019 09:54:10 PAGE 2   

  55          
  56                  0x00, 0x36, 0x36, 0x00, 0x00,   // :
  57                  0x00, 0x56, 0x36, 0x00, 0x00,   // ;
  58                  0x08, 0x14, 0x22, 0x41, 0x00,   // <
  59                  0x14, 0x14, 0x14, 0x14, 0x14,   // =
  60                  0x00, 0x41, 0x22, 0x14, 0x08,   // >
  61                  0x02, 0x01, 0x51, 0x09, 0x06,   // ?
  62                  0x32, 0x49, 0x59, 0x51, 0x3E,   // @
  63          
  64                  0x7C, 0x12, 0x11, 0x12, 0x7C,   // A
  65                  0x7F, 0x49, 0x49, 0x49, 0x36,   // B
  66                  0x3E, 0x41, 0x41, 0x41, 0x22,   // C
  67                  0x7F, 0x41, 0x41, 0x22, 0x1C,   // D
  68                  0x7F, 0x49, 0x49, 0x49, 0x41,   // E
  69                  0x7F, 0x09, 0x09, 0x09, 0x01,   // F
  70                  0x3E, 0x41, 0x49, 0x49, 0x7A,   // G
  71                  0x7F, 0x08, 0x08, 0x08, 0x7F,   // H
  72                  0x00, 0x41, 0x7F, 0x41, 0x00,   // I
  73                  0x20, 0x40, 0x41, 0x3F, 0x01,   // J
  74                  0x7F, 0x08, 0x14, 0x22, 0x41,   // K
  75                  0x7F, 0x40, 0x40, 0x40, 0x40,   // L
  76                  0x7F, 0x02, 0x0C, 0x02, 0x7F,   // M
  77                  0x7F, 0x04, 0x08, 0x10, 0x7F,   // N
  78                  0x3E, 0x41, 0x41, 0x41, 0x3E,   // O
  79                  0x7F, 0x09, 0x09, 0x09, 0x06,   // P
  80                  0x3E, 0x41, 0x51, 0x21, 0x5E,   // Q
  81                  0x7F, 0x09, 0x19, 0x29, 0x46,   // R
  82                  0x46, 0x49, 0x49, 0x49, 0x31,   // S
  83                  0x01, 0x01, 0x7F, 0x01, 0x01,   // T
  84                  0x3F, 0x40, 0x40, 0x40, 0x3F,   // U
  85                  0x1F, 0x20, 0x40, 0x20, 0x1F,   // V
  86                  0x3F, 0x40, 0x38, 0x40, 0x3F,   // W
  87                  0x63, 0x14, 0x08, 0x14, 0x63,   // X
  88                  0x07, 0x08, 0x70, 0x08, 0x07,   // Y
  89                  0x61, 0x51, 0x49, 0x45, 0x43,   // Z
  90          
  91                  0x00, 0x7F, 0x41, 0x41, 0x00,   // [
  92                  0x55, 0xAA, 0x55, 0xAA, 0x55,   // Backslash (Checker pattern)
  93                  0x00, 0x41, 0x41, 0x7F, 0x00,   // ]
  94                  0x04, 0x02, 0x01, 0x02, 0x04,   // ^
  95                  0x40, 0x40, 0x40, 0x40, 0x40,   // _
  96                  0x00, 0x03, 0x05, 0x00, 0x00,   // `
  97          
  98                  0x20, 0x54, 0x54, 0x54, 0x78,   // a
  99                  0x7F, 0x48, 0x44, 0x44, 0x38,   // b
 100                  0x38, 0x44, 0x44, 0x44, 0x20,   // c
 101                  0x38, 0x44, 0x44, 0x48, 0x7F,   // d
 102                  0x38, 0x54, 0x54, 0x54, 0x18,   // e
 103                  0x08, 0x7E, 0x09, 0x01, 0x02,   // f
 104                  0x18, 0xA4, 0xA4, 0xA4, 0x7C,   // g
 105                  0x7F, 0x08, 0x04, 0x04, 0x78,   // h
 106                  0x00, 0x44, 0x7D, 0x40, 0x00,   // i
 107                  0x40, 0x80, 0x84, 0x7D, 0x00,   // j
 108                  0x7F, 0x10, 0x28, 0x44, 0x00,   // k
 109                  0x00, 0x41, 0x7F, 0x40, 0x00,   // l
 110                  0x7C, 0x04, 0x18, 0x04, 0x78,   // m
 111                  0x7C, 0x08, 0x04, 0x04, 0x78,   // n
 112                  0x38, 0x44, 0x44, 0x44, 0x38,   // o
 113                  0xFC, 0x24, 0x24, 0x24, 0x18,   // p
 114                  0x18, 0x24, 0x24, 0x18, 0xFC,   // q
 115                  0x7C, 0x08, 0x04, 0x04, 0x08,   // r
 116                  0x48, 0x54, 0x54, 0x54, 0x20,   // s
C51 COMPILER V9.54   OLED                                                                  04/30/2019 09:54:10 PAGE 3   

 117                  0x04, 0x3F, 0x44, 0x40, 0x20,   // t
 118                  0x3C, 0x40, 0x40, 0x20, 0x7C,   // u
 119                  0x1C, 0x20, 0x40, 0x20, 0x1C,   // v
 120                  0x3C, 0x40, 0x30, 0x40, 0x3C,   // w
 121                  0x44, 0x28, 0x10, 0x28, 0x44,   // x
 122                  0x1C, 0xA0, 0xA0, 0xA0, 0x7C,   // y
 123                  0x44, 0x64, 0x54, 0x4C, 0x44,   // z
 124          
 125                  0x00, 0x10, 0x7C, 0x82, 0x00,   // {
 126                  0x00, 0x00, 0xFF, 0x00, 0x00,   // |
 127                  0x00, 0x82, 0x7C, 0x10, 0x00,   // }
 128                  0x00, 0x06, 0x09, 0x09, 0x06    // ~ (Degrees)
 129          };
 130          
 131          
 132          
 133          /**************************************************************************************************
 134                                          void OLED_Init()
 135           ***************************************************************************************************
 136           * I/P Arguments:  none
 137           * Return value : none
 138          
 139           * description  :This function is used to initialize the OLED in the normal mode.
 140                          After initializing the OLED, It clears the OLED and sets the cursor to first line first po
             -sition. .
 141          
 142           **************************************************************************************************/
 143          void OLED_Init(void){  
 144   1          RES = LOW;
 145   1          delay();
 146   1          RES = HIGH;
 147   1          
 148   1        oledSendCommand(SSD1306_DISPLAY_OFF);
 149   1          oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 150   1          oledSendCommand(0x80);
 151   1          oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 152   1          oledSendCommand(0x3F);
 153   1          oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 154   1          oledSendCommand(0x0);
 155   1          oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 156   1          oledSendCommand(SSD1306_CHARGE_PUMP);
 157   1          oledSendCommand(0x14);
 158   1          oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 159   1          oledSendCommand(0x00);
 160   1          oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 161   1          oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 162   1          oledSendCommand(SSD1306_SET_COM_PINS);
 163   1          oledSendCommand(0x12);
 164   1          oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 165   1          oledSendCommand(0xCF);
 166   1          oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 167   1          oledSendCommand(0xF1);
 168   1          oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 169   1          oledSendCommand(0x40);
 170   1          oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 171   1          oledSendCommand(SSD1306_NORMAL_DISPLAY);
 172   1          oledSendCommand(SSD1306_DISPLAY_ON);
 173   1      
 174   1      
 175   1          OLED_Clear();  /* Clear the complete LCD during init */
 176   1      }
 177          
C51 COMPILER V9.54   OLED                                                                  04/30/2019 09:54:10 PAGE 4   

 178          
 179          
 180          
 181          
 182          /***************************************************************************************************
 183                                 void OLED_DisplayChar( char ch)
 184           ****************************************************************************************************
 185           * I/P Arguments: ASCII value of the char to be displayed.
 186           * Return value    : none
 187          
 188           * description  : This function sends a character to be displayed on LCD.
 189                            Any valid ascii value can be passed to display respective character
 190          
 191           ****************************************************************************************************/
 192          void OLED_DisplayChar(uint8_t ch){
 193   1          uint8_t dat,i=0;
 194   1      
 195   1          if(((OledCursorPos+FONT_SIZE)>=128) || (ch=='\n'))
 196   1          {
 197   2              /* If the cursor has reached to end of line on page1
 198   2              OR NewLine command is issued Then Move the cursor to next line */
 199   2              OLED_GoToNextLine();
 200   2          }
 201   1          if(ch!='\n') /* TODO */
 202   1          {
 203   2              ch = ch-0x20; // As the lookup table starts from Space(0x20)
 204   2      
 205   2              while(1)
 206   2              {
 207   3                  dat= OledFontTable[ch][i]; /* Get the data to be displayed for LookUptable*/
 208   3      
 209   3      
 210   3                  oledSendByte(dat); /* Display the data and keep track of cursor */
 211   3                  OledCursorPos++;
 212   3      
 213   3                  i++;
 214   3      
 215   3                  if(i==FONT_SIZE) /* Exit the loop if End of char is encountered */
 216   3                  {
 217   4                      oledSendByte(0x00); /* Display the data and keep track of cursor */
 218   4                      OledCursorPos++;
 219   4                      break;
 220   4                  }
 221   3              }
 222   2          }
 223   1      }
 224          
 225          
 226          
 227          
 228          
 229          
 230          /***************************************************************************************************
 231                                 void OLED_DisplayString(char *ptr_stringPointer_u8)
 232           ****************************************************************************************************
 233           * I/P Arguments: String(Address of the string) to be displayed.
 234           * Return value    : none
 235          
 236           * description  :
 237                         This function is used to display the ASCII string on the lcd.
 238                           1.The ptr_stringPointer_u8 points to the first char of the string
 239                              and traverses till the end(NULL CHAR)and displays a char each time.
C51 COMPILER V9.54   OLED                                                                  04/30/2019 09:54:10 PAGE 5   

 240          
 241           ****************************************************************************************************/
 242          void OLED_DisplayString(uint8_t *ptr)
 243          {
 244   1          while(*ptr)
 245   1              OLED_DisplayChar(*ptr++);
 246   1      }
 247          
 248          /***************************************************************************************************
 249                                   void OLED_Clear()
 250           ****************************************************************************************************
 251           * I/P Arguments: none.
 252           * Return value    : none
 253          
 254           * description  :This function clears the LCD and moves the cursor to beginning of first line
 255           ****************************************************************************************************/
 256          void OLED_Clear()
 257          {
 258   1          int i;
 259   1      
 260   1          oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 261   1          oledSendCommand(0);
 262   1          oledSendCommand(127);
 263   1      
 264   1          oledSendCommand(SSD1306_SET_PAGE_ADDR);
 265   1          oledSendCommand(0);
 266   1          oledSendCommand(7);
 267   1      
 268   1      
 269   1          oledSendStart(SSD1306_ADDRESS<<1);
 270   1          oledSendByte(SSD1306_DATA_CONTINUE);
 271   1      
 272   1          for (i=0; i<1024; i++)      // Write Zeros to clear the display
 273   1          {
 274   2              oledSendByte(0);
 275   2          }
 276   1      
 277   1          oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 278   1          oledSendCommand(0);
 279   1          oledSendCommand(127);
 280   1      
 281   1          oledSendCommand(SSD1306_SET_PAGE_ADDR);
 282   1          oledSendCommand(0);
 283   1          oledSendCommand(7);   
 284   1      
 285   1          oledSendStart(SSD1306_ADDRESS<<1);
 286   1          oledSendByte(SSD1306_DATA_CONTINUE);
 287   1      }
 288          
 289          /***************************************************************************************************
 290                                   void  OLED_GoToNextLine()
 291           ****************************************************************************************************
 292           * I/P Arguments: none
 293           * Return value    : none
 294          
 295           * description  :This function moves the Cursor to beginning of the next line.
 296                  If the cursor is on last line and NextLine command is issued then
 297                  it will move the cursor to first line.
 298           ****************************************************************************************************/
 299          void  OLED_GoToNextLine()
 300          {
 301   1          /*Increment the current line number.
C51 COMPILER V9.54   OLED                                                                  04/30/2019 09:54:10 PAGE 6   

 302   1            In case it exceeds the limit, rool it back to first line */
 303   1          OledLineNum++;
 304   1          OledLineNum = OledLineNum&0x07;
 305   1          OLED_SetCursor(OledLineNum,0); /* Finally move it to next line */
 306   1      }
 307          
 308          
 309          
 310          
 311          
 312          
 313          
 314          /***************************************************************************************************
 315                          void OLED_SetCursor(char v_lineNumber_u8,char v_charNumber_u8)
 316           ****************************************************************************************************
 317           * I/P Arguments: char row,char col
 318                           row -> line number(line1=1, line2=2),
 319                                  For 2line LCD the I/P argument should be either 1 or 2.
 320                           col -> char number.
 321                                  For 16-char LCD the I/P argument should be between 0-15.
 322           * Return value    : none
 323          
 324           * description  :This function moves the Cursor to specified position
 325          
 326                             Note:If the Input(Line/Char number) are out of range
 327                                  then no action will be taken
 328           ****************************************************************************************************/
 329          void OLED_SetCursor(uint8_t lineNumber,uint8_t cursorPosition)
 330          {
 331   1          /* Move the Cursor to specified position only if it is in range */
 332   1          if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 333   1          {
 334   2              OledLineNum=lineNumber;   /* Save the specified line number */
 335   2              OledCursorPos=cursorPosition; /* Save the specified cursor position */
 336   2      
 337   2              oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 338   2              oledSendCommand(cursorPosition);
 339   2              oledSendCommand(127);
 340   2      
 341   2              oledSendCommand(SSD1306_SET_PAGE_ADDR);
 342   2              oledSendCommand(lineNumber);
 343   2              oledSendCommand(7);
 344   2      
 345   2              oledSendStart(SSD1306_ADDRESS<<1);
 346   2              oledSendByte(SSD1306_DATA_CONTINUE);
 347   2          }
 348   1      }
 349          
 350          /********************************************************************************
 351                          Local FUnctions for sending the command/data
 352           ********************************************************************************/
 353          
 354          void oledSendStart(uint8_t address)
 355          {
 356   1          SDA_PIN = LOW;
 357   1          SDA_PIN = HIGH;
 358   1          SCL_PIN = HIGH;
 359   1          SDA_PIN = LOW;
 360   1          SCL_PIN = LOW;
 361   1          oledSendByte(address);
 362   1      }
 363          
C51 COMPILER V9.54   OLED                                                                  04/30/2019 09:54:10 PAGE 7   

 364          
 365          void oledSendStop()
 366          {
 367   1          SDA_PIN = LOW;
 368   1          SCL_PIN = HIGH;
 369   1          SDA_PIN = LOW;  
 370   1          SDA_PIN = HIGH;
 371   1      }
 372          
 373          
 374          void oledWaitForAck()
 375          {
 376   1          SDA_PIN = HIGH; //Configure SDA_PIN as Input to read the ACK                //delay_us(1);
 377   1          SCL_PIN = HIGH;
 378   1          while(SDA_PIN==HIGH);
 379   1          SCL_PIN = LOW;
 380   1      }
 381          
 382          
 383          void oledSendByte(uint8_t ch)
 384          {
 385   1          char i;    
 386   1      
 387   1          SCL_PIN = LOW;
 388   1          for ( i = 7; i>=0; i--)
 389   1          {
 390   2              SDA_PIN = (ch >> (i)) & 0x1; 
 391   2              SCL_PIN = HIGH; 
 392   2              SCL_PIN = LOW;  
 393   2          }
 394   1      
 395   1          oledWaitForAck();
 396   1      }
 397          
 398          
 399          void oledSendCommand(uint8_t cmd)
 400          {
 401   1          oledSendStart(SSD1306_ADDRESS<<1);
 402   1          oledSendByte(SSD1306_COMMAND);
 403   1          oledSendByte(cmd);
 404   1          oledSendStop();
 405   1      }
 406          
 407          /*****************************************************************************************************/
 408          
 409          void delay(void){
 410   1        unsigned int i;
 411   1        for(i=0;i<65000;i++);
 412   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    668    ----
   CONSTANT SIZE    =    950    ----
   XDATA SIZE       =      2      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
